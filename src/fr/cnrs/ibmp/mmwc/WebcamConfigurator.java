///////////////////////////////////////////////////////////////////////////////
// An on-the fly processor micro-manager plugin that hacks the demo camera
// with images from webcams, thanks to the java webcam capture library.
// derived from ImageFlipper by Chris Weisiger
// at: https://github.com/micro-manager/micro-manager/tree/mm2/plugins/ImageFlipper/src/main/java/org/micromanager/imageflipper
//
package fr.cnrs.ibmp.mmwc;

import com.github.sarxos.webcam.Webcam;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;

import javax.swing.*;
import mmcorej.StrVector;
import org.micromanager.data.ProcessorConfigurator;
import org.micromanager.PropertyMap;
import org.micromanager.Studio;
import org.micromanager.internal.utils.MMFrame;

public class WebcamConfigurator extends MMFrame implements ProcessorConfigurator {

	private static final String DEFAULT_CAMERA = "Default camera for image flipper";
	private static final String DEFAULT_WEBCAM = "The webcam to use";
	private final int frameXPos_ = 300;
	private final int frameYPos_ = 300;
	private Studio studio_;
	private final String selectedCamera_;
	private javax.swing.JComboBox cameraComboBox_;
	private javax.swing.JLabel exampleImageTarget_;
	private javax.swing.JComboBox wcComboBox_;

	public WebcamConfigurator(Studio studio, PropertyMap settings) {
		studio_ = studio;
		initComponents();
		selectedCamera_ = settings.getString("camera",
				studio_.profile().getString(
						WebcamConfigurator.class, DEFAULT_CAMERA,
						studio_.core().getCameraDevice()));

		String webcam = settings.getString("webcam",
				studio_.profile().getString(
						WebcamConfigurator.class, DEFAULT_WEBCAM, ""));

		wcComboBox_.removeAllItems();
		int n = 0;
		String[] cameraNames = new String[Webcam.getWebcams().size()];

		for (Webcam c : Webcam.getWebcams()) {
			cameraNames[n] = c.getName();
			n++;
		}
		for (String item: cameraNames) {
			wcComboBox_.addItem(item);
		}
		wcComboBox_.setSelectedItem(webcam);
		this.loadAndRestorePosition(frameXPos_, frameYPos_);
		updateCameras();
	}

	@Override
	public void showGUI() {
		setVisible(true);
	}

	@Override
	public void cleanup() {
		dispose();
	}

	/**
	 * updates the content of the camera selection drop down box
	 * 
	 * Shows all available cameras and sets the currently selected camera
	 * as the selected item in the drop down box
	 */
	final public void updateCameras() {
		cameraComboBox_.removeAllItems();
		try {
			StrVector cameras = studio_.core().getAllowedPropertyValues(
					"Core", "Camera");
			for (String camera : cameras) {
				cameraComboBox_.addItem(camera);
			}
		} catch (Exception ex) {
			studio_.logs().logError(ex, "Error updating valid cameras in Webcam Capture");
		}
		cameraComboBox_.setSelectedItem(selectedCamera_);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	/**
	 * 
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {

		exampleImageTarget_ = new javax.swing.JLabel();
		cameraComboBox_ = new javax.swing.JComboBox();
		wcComboBox_ = new javax.swing.JComboBox();
		JLabel lab0 = new JLabel("Camera");
		JLabel lab1 = new JLabel("Webcam");
		JButton toggle = new JButton("Stop Webcams");
		toggle.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				toggle_ActionPerformed(evt);
			}
		});

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Webcam Capture");
		setMinimumSize(new Dimension(500, 150));

		cameraComboBox_.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cameraComboBox_ActionPerformed(evt);
			}
		});

		wcComboBox_.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				wcComboBox_ActionPerformed(evt);
			}
		});

		Container pane = getContentPane();
		pane.setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
		lab0.setAlignmentX(LEFT_ALIGNMENT);
		pane.add(lab0);
		cameraComboBox_.setAlignmentX(LEFT_ALIGNMENT);
		pane.add(cameraComboBox_);
		lab1.setAlignmentX(LEFT_ALIGNMENT);
		pane.add(lab1);
		wcComboBox_.setAlignmentX(LEFT_ALIGNMENT);
		pane.add(wcComboBox_);

		toggle.setAlignmentX(LEFT_ALIGNMENT);
		pane.add(toggle);

		pack();
	}


	private void toggle_ActionPerformed(ActionEvent evt) {
		for (Webcam c : Webcam.getWebcams()) {
			if (c.isOpen()) c.close();
		}
	}

	private void wcComboBox_ActionPerformed(java.awt.event.ActionEvent evt) {
		String camera = (String) cameraComboBox_.getSelectedItem();
		if (camera != null && wcComboBox_.getSelectedItem() != null) {
			studio_.profile().setString(WebcamConfigurator.class,
					DEFAULT_WEBCAM + "-" + camera,
					(String) wcComboBox_.getSelectedItem());
		}
		studio_.data().notifyPipelineChanged();
	}//GEN-LAST:event_rotateComboBox_ActionPerformed

	private void cameraComboBox_ActionPerformed(java.awt.event.ActionEvent evt) {
		String camera = (String) cameraComboBox_.getSelectedItem();
		if (camera != null) {
			studio_.profile().setString(WebcamConfigurator.class,
					DEFAULT_CAMERA, camera);
		}
		studio_.data().notifyPipelineChanged();
	}

	public String getCamera() {
		return (String) cameraComboBox_.getSelectedItem();
	}

	public final String getSelectedWebcamName() {

		return  (String) wcComboBox_.getSelectedItem();
	}

	@Override
	public PropertyMap getSettings() {
		PropertyMap.PropertyMapBuilder builder = studio_.data().getPropertyMapBuilder();
		builder.putString("camera", getCamera());
		builder.putString("webcam", getSelectedWebcamName());
		return builder.build();
	}
}